# BackUp
# Generated from Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing import TextIO


def serializedATN():
    return [
        4,0,50,393,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,
        6,123,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,
        20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,
        26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,
        32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
        34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,43,1,43,1,44,4,44,352,8,44,11,44,12,44,353,1,45,5,
        45,357,8,45,10,45,12,45,360,9,45,1,45,1,45,1,45,1,46,1,46,1,46,1,
        46,5,46,369,8,46,10,46,12,46,372,9,46,1,46,1,46,1,47,4,47,377,8,
        47,11,47,12,47,378,1,47,1,47,1,48,4,48,384,8,48,11,48,12,48,385,
        1,48,1,48,1,49,1,49,1,49,1,49,0,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,1,0,
        5,1,0,48,57,3,0,65,90,95,95,97,122,6,0,35,35,38,38,48,57,64,90,95,
        95,97,122,2,0,10,10,13,13,2,0,9,9,32,32,398,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
        0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,103,1,0,
        0,0,5,105,1,0,0,0,7,107,1,0,0,0,9,109,1,0,0,0,11,111,1,0,0,0,13,
        122,1,0,0,0,15,124,1,0,0,0,17,128,1,0,0,0,19,132,1,0,0,0,21,137,
        1,0,0,0,23,141,1,0,0,0,25,147,1,0,0,0,27,154,1,0,0,0,29,160,1,0,
        0,0,31,164,1,0,0,0,33,167,1,0,0,0,35,171,1,0,0,0,37,178,1,0,0,0,
        39,183,1,0,0,0,41,188,1,0,0,0,43,192,1,0,0,0,45,198,1,0,0,0,47,206,
        1,0,0,0,49,214,1,0,0,0,51,221,1,0,0,0,53,226,1,0,0,0,55,230,1,0,
        0,0,57,234,1,0,0,0,59,239,1,0,0,0,61,243,1,0,0,0,63,248,1,0,0,0,
        65,253,1,0,0,0,67,258,1,0,0,0,69,263,1,0,0,0,71,269,1,0,0,0,73,272,
        1,0,0,0,75,283,1,0,0,0,77,296,1,0,0,0,79,309,1,0,0,0,81,323,1,0,
        0,0,83,332,1,0,0,0,85,337,1,0,0,0,87,340,1,0,0,0,89,351,1,0,0,0,
        91,358,1,0,0,0,93,364,1,0,0,0,95,376,1,0,0,0,97,383,1,0,0,0,99,389,
        1,0,0,0,101,102,5,44,0,0,102,2,1,0,0,0,103,104,5,59,0,0,104,4,1,
        0,0,0,105,106,5,40,0,0,106,6,1,0,0,0,107,108,5,41,0,0,108,8,1,0,
        0,0,109,110,5,91,0,0,110,10,1,0,0,0,111,112,5,93,0,0,112,12,1,0,
        0,0,113,114,5,84,0,0,114,115,5,82,0,0,115,116,5,85,0,0,116,123,5,
        69,0,0,117,118,5,70,0,0,118,119,5,65,0,0,119,120,5,76,0,0,120,121,
        5,83,0,0,121,123,5,69,0,0,122,113,1,0,0,0,122,117,1,0,0,0,123,14,
        1,0,0,0,124,125,5,68,0,0,125,126,5,69,0,0,126,127,5,70,0,0,127,16,
        1,0,0,0,128,129,5,80,0,0,129,130,5,85,0,0,130,131,5,84,0,0,131,18,
        1,0,0,0,132,133,5,80,0,0,133,134,5,82,0,0,134,135,5,79,0,0,135,136,
        5,67,0,0,136,20,1,0,0,0,137,138,5,65,0,0,138,139,5,68,0,0,139,140,
        5,68,0,0,140,22,1,0,0,0,141,142,5,87,0,0,142,143,5,72,0,0,143,144,
        5,73,0,0,144,145,5,76,0,0,145,146,5,69,0,0,146,24,1,0,0,0,147,148,
        5,82,0,0,148,149,5,69,0,0,149,150,5,80,0,0,150,151,5,69,0,0,151,
        152,5,65,0,0,152,153,5,84,0,0,153,26,1,0,0,0,154,155,5,85,0,0,155,
        156,5,78,0,0,156,157,5,84,0,0,157,158,5,73,0,0,158,159,5,76,0,0,
        159,28,1,0,0,0,160,161,5,65,0,0,161,162,5,78,0,0,162,163,5,68,0,
        0,163,30,1,0,0,0,164,165,5,79,0,0,165,166,5,82,0,0,166,32,1,0,0,
        0,167,168,5,69,0,0,168,169,5,78,0,0,169,170,5,68,0,0,170,34,1,0,
        0,0,171,172,5,82,0,0,172,173,5,65,0,0,173,174,5,78,0,0,174,175,5,
        68,0,0,175,176,5,79,0,0,176,177,5,77,0,0,177,36,1,0,0,0,178,179,
        5,80,0,0,179,180,5,79,0,0,180,181,5,83,0,0,181,182,5,88,0,0,182,
        38,1,0,0,0,183,184,5,80,0,0,184,185,5,79,0,0,185,186,5,83,0,0,186,
        187,5,89,0,0,187,40,1,0,0,0,188,189,5,80,0,0,189,190,5,79,0,0,190,
        191,5,83,0,0,191,42,1,0,0,0,192,193,5,69,0,0,193,194,5,81,0,0,194,
        195,5,85,0,0,195,196,5,65,0,0,196,197,5,76,0,0,197,44,1,0,0,0,198,
        199,5,71,0,0,199,200,5,82,0,0,200,201,5,69,0,0,201,202,5,65,0,0,
        202,203,5,84,0,0,203,204,5,69,0,0,204,205,5,82,0,0,205,46,1,0,0,
        0,206,207,5,83,0,0,207,208,5,77,0,0,208,209,5,65,0,0,209,210,5,76,
        0,0,210,211,5,76,0,0,211,212,5,69,0,0,212,213,5,82,0,0,213,48,1,
        0,0,0,214,215,5,83,0,0,215,216,5,85,0,0,216,217,5,66,0,0,217,218,
        5,83,0,0,218,219,5,84,0,0,219,220,5,82,0,0,220,50,1,0,0,0,221,222,
        5,77,0,0,222,223,5,85,0,0,223,224,5,76,0,0,224,225,5,84,0,0,225,
        52,1,0,0,0,226,227,5,68,0,0,227,228,5,73,0,0,228,229,5,86,0,0,229,
        54,1,0,0,0,230,231,5,83,0,0,231,232,5,85,0,0,232,233,5,77,0,0,233,
        56,1,0,0,0,234,235,5,69,0,0,235,236,5,76,0,0,236,237,5,83,0,0,237,
        238,5,69,0,0,238,58,1,0,0,0,239,240,5,70,0,0,240,241,5,79,0,0,241,
        242,5,82,0,0,242,60,1,0,0,0,243,244,5,76,0,0,244,245,5,79,0,0,245,
        246,5,79,0,0,246,247,5,80,0,0,247,62,1,0,0,0,248,249,5,67,0,0,249,
        250,5,65,0,0,250,251,5,83,0,0,251,252,5,69,0,0,252,64,1,0,0,0,253,
        254,5,87,0,0,254,255,5,72,0,0,255,256,5,69,0,0,256,257,5,78,0,0,
        257,66,1,0,0,0,258,259,5,84,0,0,259,260,5,72,0,0,260,261,5,69,0,
        0,261,262,5,78,0,0,262,68,1,0,0,0,263,264,5,87,0,0,264,265,5,72,
        0,0,265,266,5,69,0,0,266,267,5,78,0,0,267,268,5,68,0,0,268,70,1,
        0,0,0,269,270,5,84,0,0,270,271,5,79,0,0,271,72,1,0,0,0,272,273,5,
        67,0,0,273,274,5,79,0,0,274,275,5,78,0,0,275,276,5,84,0,0,276,277,
        5,73,0,0,277,278,5,78,0,0,278,279,5,85,0,0,279,280,5,69,0,0,280,
        281,5,85,0,0,281,282,5,80,0,0,282,74,1,0,0,0,283,284,5,67,0,0,284,
        285,5,79,0,0,285,286,5,78,0,0,286,287,5,84,0,0,287,288,5,73,0,0,
        288,289,5,78,0,0,289,290,5,85,0,0,290,291,5,69,0,0,291,292,5,68,
        0,0,292,293,5,79,0,0,293,294,5,87,0,0,294,295,5,78,0,0,295,76,1,
        0,0,0,296,297,5,67,0,0,297,298,5,79,0,0,298,299,5,78,0,0,299,300,
        5,84,0,0,300,301,5,73,0,0,301,302,5,78,0,0,302,303,5,85,0,0,303,
        304,5,69,0,0,304,305,5,76,0,0,305,306,5,69,0,0,306,307,5,70,0,0,
        307,308,5,84,0,0,308,78,1,0,0,0,309,310,5,67,0,0,310,311,5,79,0,
        0,311,312,5,78,0,0,312,313,5,84,0,0,313,314,5,73,0,0,314,315,5,78,
        0,0,315,316,5,85,0,0,316,317,5,69,0,0,317,318,5,82,0,0,318,319,5,
        73,0,0,319,320,5,71,0,0,320,321,5,72,0,0,321,322,5,84,0,0,322,80,
        1,0,0,0,323,324,5,85,0,0,324,325,5,83,0,0,325,326,5,69,0,0,326,327,
        5,67,0,0,327,328,5,79,0,0,328,329,5,76,0,0,329,330,5,79,0,0,330,
        331,5,82,0,0,331,82,1,0,0,0,332,333,5,68,0,0,333,334,5,79,0,0,334,
        335,5,87,0,0,335,336,5,78,0,0,336,84,1,0,0,0,337,338,5,85,0,0,338,
        339,5,80,0,0,339,86,1,0,0,0,340,341,5,66,0,0,341,342,5,69,0,0,342,
        343,5,71,0,0,343,344,5,73,0,0,344,345,5,78,0,0,345,346,5,78,0,0,
        346,347,5,73,0,0,347,348,5,78,0,0,348,349,5,71,0,0,349,88,1,0,0,
        0,350,352,7,0,0,0,351,350,1,0,0,0,352,353,1,0,0,0,353,351,1,0,0,
        0,353,354,1,0,0,0,354,90,1,0,0,0,355,357,7,1,0,0,356,355,1,0,0,0,
        357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,
        360,358,1,0,0,0,361,362,7,2,0,0,362,363,6,45,0,0,363,92,1,0,0,0,
        364,365,5,47,0,0,365,366,5,47,0,0,366,370,1,0,0,0,367,369,8,3,0,
        0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,
        0,371,373,1,0,0,0,372,370,1,0,0,0,373,374,6,46,1,0,374,94,1,0,0,
        0,375,377,7,4,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,
        0,378,379,1,0,0,0,379,380,1,0,0,0,380,381,6,47,1,0,381,96,1,0,0,
        0,382,384,7,3,0,0,383,382,1,0,0,0,384,385,1,0,0,0,385,383,1,0,0,
        0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,6,48,1,0,388,98,1,0,0,
        0,389,390,9,0,0,0,390,391,1,0,0,0,391,392,6,49,2,0,392,100,1,0,0,
        0,7,0,122,353,358,370,378,385,3,1,45,0,6,0,0,0,1,0
    ]

class Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMA = 1
    PUNTOCOMA = 2
    PARENTESIS_IZQ = 3
    PARENTESIS_DER = 4
    PARENTESISC_IZQ = 5
    PARENTESISC_DER = 6
    Bool = 7
    Def = 8
    Put = 9
    Proc = 10
    Add = 11
    While = 12
    Repeat = 13
    Until = 14
    And = 15
    Or = 16
    End = 17
    Random = 18
    PosX = 19
    PosY = 20
    Pos = 21
    Equal = 22
    Greater = 23
    Smaller = 24
    Substr = 25
    Mult = 26
    Div = 27
    Sum = 28
    El = 29
    For = 30
    Loop = 31
    Case = 32
    When = 33
    Then = 34
    Whend = 35
    To = 36
    ContinueUp = 37
    ContinueDown = 38
    ContinueLeft = 39
    ContinueRight = 40
    UseColor = 41
    Down = 42
    Up = 43
    Beginning = 44
    ID = 45
    NUMERO = 46
    COMMENT = 47
    WS = 48
    NEWLINE = 49
    ERROR_CHAR = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "';'", "'('", "')'", "'['", "']'", "'DEF'", "'PUT'", 
            "'PROC'", "'ADD'", "'WHILE'", "'REPEAT'", "'UNTIL'", "'AND'", 
            "'OR'", "'END'", "'RANDOM'", "'POSX'", "'POSY'", "'POS'", "'EQUAL'", 
            "'GREATER'", "'SMALLER'", "'SUBSTR'", "'MULT'", "'DIV'", "'SUM'", 
            "'ELSE'", "'FOR'", "'LOOP'", "'CASE'", "'WHEN'", "'THEN'", "'WHEND'", 
            "'TO'", "'CONTINUEUP'", "'CONTINUEDOWN'", "'CONTINUELEFT'", 
            "'CONTINUERIGHT'", "'USECOLOR'", "'DOWN'", "'UP'", "'BEGINNING'" ]

    symbolicNames = [ "<INVALID>",
            "COMA", "PUNTOCOMA", "PARENTESIS_IZQ", "PARENTESIS_DER", "PARENTESISC_IZQ", 
            "PARENTESISC_DER", "Bool", "Def", "Put", "Proc", "Add", "While", 
            "Repeat", "Until", "And", "Or", "End", "Random", "PosX", "PosY", 
            "Pos", "Equal", "Greater", "Smaller", "Substr", "Mult", "Div", 
            "Sum", "El", "For", "Loop", "Case", "When", "Then", "Whend", 
            "To", "ContinueUp", "ContinueDown", "ContinueLeft", "ContinueRight", 
            "UseColor", "Down", "Up", "Beginning", "ID", "NUMERO", "COMMENT", 
            "WS", "NEWLINE", "ERROR_CHAR" ]

    ruleNames = [ "COMA", "PUNTOCOMA", "PARENTESIS_IZQ", "PARENTESIS_DER", 
                  "PARENTESISC_IZQ", "PARENTESISC_DER", "Bool", "Def", "Put", 
                  "Proc", "Add", "While", "Repeat", "Until", "And", "Or", 
                  "End", "Random", "PosX", "PosY", "Pos", "Equal", "Greater", 
                  "Smaller", "Substr", "Mult", "Div", "Sum", "El", "For", 
                  "Loop", "Case", "When", "Then", "Whend", "To", "ContinueUp", 
                  "ContinueDown", "ContinueLeft", "ContinueRight", "UseColor", 
                  "Down", "Up", "Beginning", "ID", "NUMERO", "COMMENT", 
                  "WS", "NEWLINE", "ERROR_CHAR" ]

    grammarFileName = "Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None

    def notifyListeners(self, e: RecognitionException):
        msg = f"Léxico error en línea {self.line}: carácter no reconocido '{self.text}'"
        self.notifyListeners(msg)

    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[45] = self.ID_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))

    def ID_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            if len(self.text) < 3:
                print(f"Error: ID '{self.text}' la cadena debe ser mayor a 2 caracteres.")
            if len(self.text) > 10:
                print(f"Error: ID '{self.text}' la cadena debe ser menor a 10 caracteres.")
     
